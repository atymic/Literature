<?xml version="1.0" encoding="utf-8"?>
<?xyl-use href="hoa://Application/View/Shared/Definition/Code.xyl"?>
<?xyl-use href="hoa://Application/View/Shared/Definition/Comment.xyl"?>
<?xyl-overlay href="hoa://Application/View/Shared/Overlay/Code.xyl"?>
<?xyl-overlay href="hoa://Application/View/Shared/Overlay/Comment.xyl"?>

<overlay xmlns="http://hoa-project.net/xyl/xylophone">
<yield id="main_content">

  <h1>Guide du contributeur</h1>

  <p><strong>Contribuer</strong> à un projet est génial ! Cependant, il peut
  s'avérer difficile de savoir exactement <strong>comment le faire</strong> et
  <strong>qu'est-ce qui doit être fait</strong>. Ce guide du contributeur va vous
  aider à faire de belles contributions !</p>

  <h2 id="Table_of_contents">Table des matières</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Introduction" for="main-toc">Introduction</h2>

  <p>Hoa est un gros projet. Ce projet ne peut pas vivre sans l'aide d'une
  précieuse communauté. Cette communauté est constituée de développeurs,
  réguliers ou non, parfois même de personnes qui ne sont pas des développeurs
  mais des amoureux de la programmation, des personnes qui utilisent PHP,
  parfois pas…</p>
  <p>Chaque expérience, chaque idée, chaque chose qui pourrait améliorer Hoa
  pour des milliers d'utilisateurs à travers le monde est
  <strong>inestimable</strong>. Cependant, contribuer à un projet n'est pas une
  tâche facile. Il y a quelques pré-requis, quelques informations utiles, qu'il
  faut connaître :</p>
  <ul>
    <li>l'organisation ;</li>
    <li>qui sont les personnes à qui parler ; et</li>
    <li>d'une manière générale, quoi faire exactement ?</li>
  </ul>
  <p>Nous espérons que ce guide du contributeur saura répondre à vos
  questions.</p>

  <h2 id="Prerequisites" for="main-toc">Pré-requis</h2>

  <p>Avant de contribuer à Hoa, nous devons clarifier quelques
  <strong>pré-requis</strong> en terme d'outils, de compétences etc. afin de
  rendre votre participation aussi plaisante que possible.</p>

  <h3 id="Tools" for="main-toc">Outils</h3>

  <p>Pour contribuer à Hoa, les outils suivants sont requis :</p>
  <ul>
    <li><a href="http://php.net/">PHP</a> ;</li>
    <li><a href="http://git-scm.com/">Git</a> ;</li>
    <li><a href="http://getcomposer.org/">Composer</a> ;</li>
    <li><a href="http://curl.haxx.se/">cURL</a>.</li>
  </ul>
  <p>C'est tout ! N'importe quel autre outil sera automatiquement installé au
  besoin.</p>

  <h3 id="Skills" for="main-toc">Compétences</h3>

  <p>Ce point important mérite d'être clarifier rapidement. Il n'y a absolument
  <strong>aucun niveau de compétence minimum requis</strong> pour contribuer à
  Hoa. Si vous avez une idée mais que vous ne savez pas comment la développer :
  aucun problème, ouvrez simplement une discussion et nous serons ravis de vous
  aider à comprendre comment la réaliser ! Si vous avez des connaissances plus
  approfondies que nous dans un domaine spécifique (ce qui risque fort d'être
  souvent le cas), nous serons très content d'apprendre de vous ! La
  communauté de Hoa est riche parce qu'elle est constituée de personnes très
  <strong>différentes</strong>. Nous sommes très impatients de voir votre
  première contribution !</p>
  <p>Il est également important de noter que nous allons vous montrer quelques
  commandes Git. Notre objectif n'est pas de fournir un guide Git. Les commandes
  données sont celles que vous utiliserez probablement quotidiennement, mais si
  vous ne les comprenez pas ou si vous ne vous sentez pas confortable avec Git,
  vous devez soit lire <a href="http://git-scm.com/book/">la documentation de
  Git</a>, soit demander de l'aide. Ce qui introduit la prochaine section.</p>

  <h3 id="Getting_help" for="main-toc">Obtenir de l'aide</h3>

  <p>À n'importe quel moment, vous trouverez au moins une personne pour vous
  <strong>aider</strong>. Hoa, en tant qu'ensemble de bibliothèques, est un
  projet vaste et tous les <strong>hoackers</strong> ne sont pas présents en
  permanence, mais nous sommes quasiment certain que vous rencontrerez quelqu'un
  qui pourra vous aider ou vous rediriger vers quelqu'un d'autre. Un hoacker est
  un contributeur de longue date qui a une connaissance approfondie ou large du
  projet. Cela inclut les relecteurs ou les <em lang="en">commiters</em>.</p>
  <p>Deux façons d'obtenir de l'aide :</p>
  <ul>
    <li><a href="@community#IRC">sur IRC</a>, pour une aide en
    <strong>temps-réel</strong> et <strong>synchrone</strong> ;</li>
    <li><a href="@community#Mailing-lists">sur des
    <em lang="en">mailing-lists</em></a>, pour une aide
    <strong>asynchrone</strong> avec plus de monde.</li>
  </ul>

  <h2 id="What_to_do" for="main-toc">Quoi faire ?</h2>

  <p>Hoa a plus de 50 bibliothèques, en plus d'autres sous-projets. Chaque
  bibliothèque vit dans un <strong>dépôt spécifique</strong>. Il est difficile
  d'avoir un <strong>aperçu</strong> du travail courant :</p>
  <ul>
    <li>qu'est-ce qui doit être fait ?</li>
    <li>qu'est-ce qui est prêt à être fait ?</li>
    <li>qu'est-ce qui est en cours ? ou</li>
    <li>qu'est-ce qui est en relecture ?</li>
  </ul>
  <p>Toutes ces questions sont <strong>légitimes</strong> quand nous démarrons
  avec un projet (parfois même si nous sommes contributeurs depuis
  longtemps !).</p>

  <h3 id="Boards_for_an_overview" for="main-toc">Des tableaux de bord comme
  aperçus</h3>

  <p>Chaque bibliothèque à un <a href="@literature#Hack_book">chapitre dans le
  <em lang="en">hack book</em></a>. Chaque chapitre fournit dans son en-tête des
  liens utiles, tels que :</p>
  <ul>
    <li>
      <img src="hoa://Application/Public/Image/Icon/Waffle.svg" alt="Board" height="25px" />
      son <strong>tableau de bord</strong> ;
    </li>
    <li>
      <img src="hoa://Application/Public/Image/Icon/Git.svg" alt="Git" height="25px" />
      son <strong>dépôt Git</strong> ;
    </li>
    <li>
      <img src="hoa://Application/Public/Image/Icon/Github.svg" alt="Github" height="25px" />
      son <strong>miroir Github</strong>.
    </li>
  </ul>
  <p>Le <strong>tableau de bord</strong> est la place où tous les travaux
  apparaissent sous forme de colonnes qui représentent la progression :</p>
  <ol>
    <li><strong><em lang="en">backlog</em></strong>, les travaux en
    discussion ;</li>
    <li><strong><em lang="en">ready</em></strong>, les travaux qui sont prêts
    à être fait ;</li>
    <li><strong><em lang="en">in progress</em></strong>, les travaux qui sont en
    train d'être fait par certains contributeurs ;</li>
    <li><strong><em lang="en">done</em></strong>, les travaux qui ont été
    récemment fait.</li>
  </ol>
  <p>Il est probable que vous sachiez que le <code>Central</code> est un dépôt
  (en lecture seule) rassemblant toutes les bibliothèques de Hoa en un seul
  endroit. Ainsi, comme attendu, <a href="@board:repository=Central">le tableau
  de bord de <code>Central</code></a> offre le <strong>plus haut
  aperçu</strong> de tous les travaux courants de toutes les bibliothèques de
  Hoa.</p>

  <h3 id="What_difficulty" for="main-toc">Quelle difficulté ?</h3>

  <p>Afin de faciliter le processus de contribution, nous essayons d'attacher
  certaines étiquettes (<em lang="en">labels</em>) à chaque travail (comme
  <code>bug</code> ou <code>enhancement</code>). Certaines d'entre elles offrent
  une indication sur la <strong>difficulté</strong> :</p>
  <ul>
    <li><code>casual</code>, qui peut être fait par un <strong>nouveau</strong>
    contributeur ou qui peut être fait <strong>rapidement</strong> ;</li>
    <li><code>medium</code>, requière <strong>certaines compétences</strong>
    pour effectuer ce travail ;</li>
    <li><code>hard</code>, requière <strong>des connaissances fortes</strong>
    dans le code ou le domaine concerné.</li>
  </ul>
  <p>Heureusement, les tableaux de bord offrent un moteur de recherche
  facilitant le tri des travaux à partir de votre profil ; ainsi :</p>
  <ul>
    <li><a href="@board:repository=Central&amp;search=difficulty: casual">les
    travaux <code>casual</code></a> ;</li>
    <li><a href="@board:repository=Central&amp;search=difficulty: medium">les
    travaux <code>medium</code></a> ;</li>
    <li><a href="@board:repository=Central&amp;search=difficulty: hard">les
    travaux <code>hard</code></a>.</li>
  </ul>
  <p>Maintenant que nous savons quoi faire, contribuons !</p>

  <h2 id="Set_up_the_environment" for="main-toc">Monter son environnement</h2>

  <p>Dans cette section nous allons voir comment mettre en place le dépôt (le
  code) et les dépendances (principalement pour exécuter les tests).</p>

  <h3 id="Repository" for="main-toc">Dépôt</h3>

  <p>Hoa héberge ses propres <a href="https://git.hoa-project.net/">dépôts
  Git</a>. Les règles sont les suivantes :</p>
  <ul>
    <li>tout le monde peut <strong>lire</strong> à travers <strong>HTTP</strong> :</li>
    <pre><code class="language-shell">$ git clone https://git.hoa-project.net/Library/Websocket.git</code></pre>
    <li>les <em lang="en">commiters</em> peuvent <strong>lire et écrire</strong>
    à travers <strong>SSH</strong> :</li>
    <pre><code class="language-shell">$ git clone git@git.hoa-project.net:Library/Websocket.git</code></pre>
  </ul>
  <p>Comme mentionné sur <a href="@source#Version_manager_(Git)">la page des
  sources</a>, la plupart des dépôts ont des
  <a href="https://github.com/hoaproject">miroirs sur Github</a>. Nous utilisons
  Github comme <strong><em lang="en">bug tracker</em></strong>, où toutes les
  <em lang="en">issues</em> (travail) et les contributions s'y déroulent. Aussi,
  plusieurs outils sont liés à Github comme les tableaux de bord ou Composer
  (détaillé ci-après). Les miroirs sont uni-directionnels et un robot est
  responsable de tout <strong>synchroniser</strong>, pas d'inquiétude.</p>
  <p>C'est pourquoi nous vous suggérons de démarrer en clonant une bibliothèque
  depuis Github, par exemple <a href="@github:repository=Websocket">la
  bibliothèque <code>Hoa\Websocket</code></a> :</p>
  <pre><code class="language-shell">$ mkdir Hoa
$ cd Hoa
$ git clone https://github.com/hoaproject/Websocket.git
$ cd Websocket</code></pre>
  <p>Si <a href="https://help.github.com/articles/generating-ssh-keys/">Github
  connaît votre clé SSH</a>, nous suggérons alors :</p>
  <pre><code class="language-shell">$ git clone git@github.com:hoaproject/Websocket.git</code></pre>
  <p>Immédiatement après, pour éviter tout conflit potentiel, nous suggérons de
  créer une nouvelle branche :</p>
  <pre><code class="language-shell">$ git checkout -b incoming</code></pre>
  <p>Créer une branche <code>incoming</code> <strong>protège</strong> la branche
  <code>master</code>. Le <code>master</code> est très important pour Hoa, parce
  qu'il utilise <a href="@source#Rush_Release"><em lang="en">Rush
  Release</em></a> comme système de <em lang="en">release</em>. Cela implique
  que la branche <code>master</code> contient toujours les derniers patches.
  Ainsi, pour mettre à jour la branche <code>master</code>, vous avez seulement
  à exécuter :</p>
  <pre><code class="language-shell">$ git pull origin master:master</code></pre>
  <p>Parce que votre branche référente est <code>incoming</code> et pas
  <code>master</code>, il est plus facile de maintenir votre dépôt à jour. Nous
  détaillerons tout ça rapidement.</p>
  <p>Bien sûr, vous n'allez pas travailler directement sur le dépôt de Hoa parce
  que : premièrement c'est un miroir, deuxièmement vous n'avez pas les
  permissions et troisièmement c'est une mauvaise pratique. Vous devez
  <a href="https://help.github.com/articles/fork-a-repo/"><em>forker</em> le
  dépôt</a>. Un fork est <strong>copie</strong> du dépôt, permettant de faire ce
  que bon vous semble sans aucun restriction. Pour forker un dépôt, par exemple
  <a href="@github:repository=Websocket"><code>Hoa\Websocket</code></a>, vous
  pouvez utiliser
  <a href="https://github.com/hoaproject/Websocket/fork">l'interface de
  Github</a> ou exécuter la commande suivante (en considérant que la variable
  <code>$me</code> représente votre nom d'utilisateur Github) :</p>
  <pre><code class="language-shell">$ me=&amp;lt;your Github username>
$ curl -X POST https://api.github.com/repos/hoaproject/Websocket/forks --user $me</code></pre>
  <p>Maintenant que vous avez votre propre fork, nous pouvons dire à votre dépôt
  qu'il y a un autre <strong><em lang="en">remote</em></strong>. Un
  <em lang="en">remote</em> est une autre source pour votre dépôt. Ainsi :</p>
  <pre><code class="language-shell">$ git remote add me git@github.com:$me/Websocket.git</code></pre>
  <p>À ce stade, nous devrions voir 2 <em lang="en">remotes</em>, comme dans
  l'exemple suivant :</p>
  <pre><code class="language-shell">$ git remote --verbose
me  git@github.com:$me/Websocket.git (fetch)
me  git@github.com:$me/Websocket.git (push)
origin  git@github.com:hoaproject/Websocket.git (fetch)
origin  git@github.com:hoaproject/Websocket.git (push)</code></pre>
  <p>Bonus : si vous voulez voir toutes les <em lang="en">pull requests</em>
  localement, c'est à dire toutes les <strong>contributions en cours</strong>
  (peut être utile pour aider ou tester la contribution de quelqu'un d'autre),
  nous allons créer un nouveau <em lang="en">remote</em> appelé
  <code>github-pr</code>. Il pointera vers la même URL qu'<code>origin</code>
  dans ce cas particulier mais nous créons un autre <em lang="en">remote</em>
  pour clarifier le processus. Ainsi :</p>
  <pre><code class="language-shell">$ git remote add github-pr git@github.com:hoaproject/Websocket.git
$ git config remote.github-pr.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*'
$ git remote --verbose
github-pr   git@github.com:hoaproject/Websocket.git (fetch)
github-pr   git@github.com:hoaproject/Websocket.git (push)
me  git@github.com:$me/Websocket.git (fetch)
me  git@github.com:$me/Websocket.git (push)
origin  git@github.com:hoaproject/Websocket.git (fetch)
origin  git@github.com:hoaproject/Websocket.git (push)</code></pre>
  <p>Donc pour résumer, nous avons 3 <em lang="en">remotes</em>, c'est à dire
  3 sources différentes pour le même code :</p>
  <ol>
    <li><code>origin</code>, le dépôt de Hoa (le miroir Github) ;</li>
    <li><code>me</code>, votre fork ;</li>
    <li><code>github-pr</code>, toutes les <em lang="en">pull requests</em> du
    dépôt de Hoa.</li>
  </ol>
  <p>Finalement, pour obtenir toutes les données de tous les
  <em lang="en">remotes</em> :</p>
  <pre><code class="language-shell">$ git fetch --all</code></pre>

  <h3 id="Dependencies" for="main-toc">Dépendances</h3>

  <p>Le dépôt que vous avez cloné est susceptible de contenir des
  <strong>dépendances</strong>. Pour les gérer et les installer, nous nous
  reposons sur <a href="http://getcomposer.org/">Composer</a>. Ainsi, pour les
  installer :</p>
  <pre><code class="language-shell">$ composer install</code></pre>
  <p>Et pour les mettre à jour :</p>
  <pre><code class="language-shell">$ composer update</code></pre>
  <p>Un dossier <code>vendor/</code> a été créé à la racine du dépôt avec un
  fichier <code>composer.lock</code>. À l'intérieur du dossier
  <code>vendor/hoa/</code> vous trouverez toutes les dépendances de Hoa. Le
  fichier <code>vendor/bin/hoa</code> est une commande pour exécuter d'autres
  programmes fournis par Hoa. Nous allons les utiliser rapidement.</p>

  <h3 id="New_branch" for="main-toc">Nouvelle branche</h3>

  <p>En plus de la branche <code>incoming</code>, il sera plus confortable et
  moins sujet à erreur de créer <strong>une branche par contribution</strong>.
  Il n'y a aucune convention sur le nommage des branches mais nous recommandons
  tout en minuscule et <code>-</code>, <code>_</code> ou <code>/</code> à la
  place des espaces. Avant de créer une nouvelle branche, il est recommandé de
  démarrer avec des branches <code>master</code> et <code>incoming</code> à
  jour :</p>
  <pre><code class="language-shell">$ git pull origin master:master
$ git checkout incoming
$ git merge master</code></pre>
  <p>Maintenant vous êtes prêts à créer une nouvelle branche, disons
  <code>awesome-feature</code>:</p>
  <pre><code class="language-shell">$ git checkout -b awesome-feature
$ git branch
* awesome-feature
  incoming
  master</code></pre>
  <p>Vous êtes désormais <strong>prêts</strong> à écrire du code.</p>
  <p>Les fichiers que vous allez modifier seront probablement à la racine.
  Modifiez-les, sauvegardez-les, exécutez-les, vous êtes libres de faire ce que
  vous voulez. Supposez que tous les fichiers sont encodés en UTF-8. C'est
  important. Si vous avez besoin de programmes pour éditer votre code, nous
  pouvons vous aider (voir en-dessous).</p>
  <p>Sur <a href="@source#Structure_of_a_library">la page des sources</a>, nous
  apprenons quelle est la <strong>structure</strong> d'une bibliothèque. Vous
  devez la lire.</p>

  <h2 id="Validating_a_patch" for="main-toc">Validation d'un patch</h2>

  <p>Pendant que vous développez, avant de commiter vos patches, vous avez
  besoin de les <strong>valider</strong>. Notre conseil est de répéter cette
  opération très <strong>souvent</strong>. Plus vous validez votre code, plus ce
  sera facile de détecter et de comprendre les erreurs ou les fautes.</p>

  <h3 id="Preparing_a_patch" for="main-toc">Préparation d'un patch</h3>

  <p>Avant tout : <strong><em lang="en">coding style</em></strong>. Hoa adopte
  les standards <a href="http://php-fig.org/psr/psr-1/">PSR-1</a> et
  <a href="http://php-fig.org/psr/psr-2/">PSR-2</a> pour les styles de codage,
  en plus d'autres standards internes. Afin de <strong>vérifier</strong> et
  automatiquement <strong>corriger</strong> la majorité d'entre eux, vous aurez
  besoin d'exécuter la commande suivante, de préférence à la racine du
  dépôt :</p>
  <pre><code class="language-shell">$ vendor/bin/hoa devtools:cs --dry-run --diff .</code></pre>
  <p>Cette commande va vérifier et afficher si la majorité des styles de codage
  sont <strong>respectés</strong>. Si vous voulez
  <strong>automatiquement</strong> les corriger, enlever l'option
  <code>--dry-run</code> ; ainsi :</p>
  <pre><code class="language-shell">$ vendor/bin/hoa devtools:cs --diff .</code></pre>
  <p>La commande <code>hoa devtools:cs</code> requiert l'outil
  <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP-CS-Fixer</a> d'être
  installé quelque part. Puisque c'est un outil que vous pourriez utiliser dans
  plusieurs projets, notre conseil est de l'installer globalement :</p>
  <pre><code class="language-shell">$ composer global require fabpot/php-cs-fixer</code></pre>
  <p>Assurez-vous que <code>~/.composer/vendor/bin</code> est présent dans votre
  <code>$PATH</code>.</p>

  <h3 id="Testing_a_patch" for="main-toc">Test d'un patch</h3>

  <p>Une fois votre code tout beau, vous pouvez en premier lieu <strong>exécuter
  les tests</strong> afin de vous assurez qu'il n'y a pas de
  <strong>régressions</strong> ; en considérant que vous êtes toujours à la
  racine du dépôt :</p>
  <pre><code class="language-shell">$ vendor/bin/hoa test:run --directories Test/</code></pre>
  <p>Excellent ! Pour <strong>écrire</strong> des nouveaux tests, pour
  <strong>compléter</strong> des test existants ou pour en apprendre plus sur
  leur exécution, merci de vous référer à <a href="@hack:chapter=Test">la
  documentation de la bibliothèque <code>Hoa\Test</code></a>. Nous ne demandons
  aux contributeurs aucune méthodologie de développement spécifique, comme le
  développement dirigé par les tests par exemple. Vous êtes libres de faire ce
  que vous voulez.</p>

  <h2 id="Commiting_a_patch" for="main-toc">Commiter un patch</h2>

  <p>Parce que les crédits sont importants, vérifier que votre nom et votre
  email sont correctement renseignés dans votre configuration Git :</p>
  <pre><code class="language-shell">$ git config --get user.name
Gordon Freeman
$ git config --get user.email
gordon@freeman.hl</code></pre>
  <p>Si une de ces valeurs est vide, alors vous devez les définir (la plupart du
  temps globalement, c'est à dire pour tous les dépôts) :</p>
  <pre><code class="language-shell">$ git config --global user.name 'Gordon Freeman'
$ git config --global user.email 'gordon@freeman.hl'</code></pre>
  <p>Maintenant… commiter autant que possible. <strong>Abusez des
  commits</strong>. Ce n'est pas mauvais d'avoir trop de commits mais c'est très
  gênant de ne pas en avoir assez. Un commit est <strong>atomique</strong>, il
  inclut une modification spécifique. Au minimum, le code doit être exécutable
  entre chaque commit.</p>
  <p>La langue d'un commit est l'anglais. Son titre doit fait 50 caractères
  maximum. Son corps doit être formatté en
  <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> (même
  <a href="https://help.github.com/articles/github-flavored-markdown/">la
  version Github de Markdown</a> est accepté). Un message de commit raconte une
  histoire. Sentez-vous libre d'ajouter des liens et d'autres références dans
  le corps du commit. Il <strong>doit répondre</strong> aux questions
  suivantes :</p>
  <ol>
    <li><strong>Quel était</strong> le problème ?</li>
    <li><strong>Comment résoudre</strong> ce problème ?</li>
    <li><strong>Comment nous avons résolu</strong> ce problème ?</li>
  </ol>
  <p>Ces questions reflètent la façon dont nous faisons tout dans Hoa (en
  particulier la documentation). Nous ne proposons pas d'API « cool » ou
  « <em lang="en">blazing fast</em> » juste pour faire le
  « <em lang="en">buzz</em> ».  Nous identifions un problème, nous y
  réfléchissons, nous réfléchissons à plusieurs solutions et finalement,
  nous proposons une façon d'y répondre en conservant scrupuleusement la
  compatibilité. Parfois, cela peut être un long processus mais c'est très
  important.</p>
  <p>Aussi, même si se forcer à répondre à ces questions quand nous écrivons un
  commit peut parfois s'avérer <strong>difficile</strong> ou ennuyant,
  croyez-nous, ce sera très <strong>apprécié</strong> quand elles seront lues
  plus tard.</p>
  <p>Pour <strong>choisir</strong> précisément ce qui sera ajouté à l'intérieur
  du commit, nous recommandons de toujours utiliser le processus suivant :</p>
  <pre><code class="language-shell">$ git add --patch &amp;lt;file>
$ git add --patch &amp;lt;another file>
…
$ git commit</code></pre>
  <p>Remarquez que <code>git commit</code> n'a aucun argument parce que le patch
  a été <strong>construit</strong> précédemment avec <code>git add</code>. (Nous
  recommandons chaudement d'utiliser votre éditeur —défini à l'aide de la
  variable d'environnement <code>$EDITOR</code>— pour éditer votre message de
  commit : il n'est pas possible de remplir nos recommendations en ligne de
  commande).</p>
  <p>Pour vérifier ce qui a changé, vous pouvez utiliser la commande <code>git
  status</code> :</p>
  <pre><code class="language-shell">$ git status --long</code></pre>
  <p>Si vous avez fait une erreur pendant le commit, pas de souci, vous êtes
  toujours capable d'éditer votre message de commit en exécutant :</p>
  <pre><code class="language-shell">$ git commit --amend</code></pre>
  <p>Ne modifiez pas le fichier <code>CHANGELOG.md</code>. Il est
  généré automatiquement.</p>

  <h3 id="Commit_message_structure" for="main-toc">Structure d'un message de commit</h3>

  <p>Comme nous l'avons vu précédemment, le titre d'un commit fait 50 caractères
  au maximum. Ce titre se doit d'être précis et sa lecture
  doit permettre d'identifier la modification apportée.</p>

  <p>Pour faciliter l'écriture de ce titre, nous avons défini une structure
  type&nbsp;: <code>type(scope) title</code>.<p>

  <p>Cette structure permet de décrire quel est le type de commit et sur quoi il
  porte. Nous avons en effet isolé plusieurs types récurrents dans un
  projet&nbsp;:</p>

  <ul>
    <li><code>chore</code> pour tout ce qui concerne la « qualité »&nbsp;;</li>
    <li><code>fix</code> pour un correctif&nbsp;;</li>
    <li><code>feat</code> pour une nouvelle fonctionnalité&nbsp;;</li>
    <li><code>depr</code> pour une fonctionnalité dépréciée&nbsp;;</li>
    <li><code>sec</code> pour une modification liée à la sécurité&nbsp;;</li>
    <li><code>doc</code> pour tout ce qui se rapporte à la documentation&nbsp;;</li>
    <li><code>test</code> pour une modification liée aux tests&nbsp;;</li>
    <li><code>undef</code> pour tout le reste.</li>
  </ul>

  <p>Nous obtenons par exemple&nbsp;:</p>

  <ul>
    <li><code>feat(permission) Search backward bla bla.,</code></li>
    <li><code>fix(user) `getName` is incorrectly computing its value.,</code></li>
  </ul>

  <p>L'objectif de la normalisation des messages de commit est de permettre la
  génération d'un fichier <code>CHANGELOG</code> tel que suggéré par
  <a href="http://keepachangelog.com/fr/1.0.0/">Keep a changelog</a>,
  avec des sections « Ajouts », « Correctifs », « Suppressions » ainsi que la date
  de la sortie des versions.</p>

  <h3 id="Review_all_your_commits" for="main-toc">Relire tous vos commits</h3>

  <p>Parfois vous pourrez exprimer le besoin de <strong>lister</strong> tous vos
  commits. Soit vous utilisez la commande <code>git log</code> classique :</p>
  <pre><code class="language-shell">$ git log --decorate=full incoming..HEAD</code></pre>
  <p>Ou vous pouvez utiliser une commande <code>git log</code> améliorée que
  nous allons appeler <code>graph</code> :</p>
  <pre><code class="language-shell">$ git config --global alias.graph "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an>%Creset' --abbrev-commit --date=relative"</code></pre>
  <p>Ainsi :</p>
  <pre><code class="language-shell">$ git graph incoming..HEAD</code></pre>

  <h2 id="Publishing_a_patch" for="main-toc">Publication d'un patch</h2>

  <p>Même si ce n'est pas complet, <strong>publier</strong> votre travail ! Tout
  d'abord, nous serons très content de voir des personnes contribuer à Hoa, même
  si ce n'est pas complet. Ensuite, cela offre un <strong>aperçu</strong> de ce
  qui est en cours. Et enfin, ce sera plus facile pour vous d'obtenir de
  l'<strong>aide</strong> puisque des personnes pourront suivre votre travail
  pro-activement. Donc : publier votre contribution <strong>le plus tôt
  possible</strong> !</p>
  <p>Pour publier votre travail, les patches doivent être poussés sur votre
  propre  fork. Si vous vous en rappelez, le <em lang="en">remote</em> faisant
  référence à votre fork est appelé <code>me</code>. Vous devez alors pousser
  votre branche <code>awesome-feature</code> sur votre <em lang="en">remote</em>
  <code>me</code> :</p>
  <pre><code class="language-shell">$ git push me awesome-feature</code></pre>
  <p>Ensuite, ouvrez votre navigateur et allez sur la page de votre
  <em lang="en">fork</em> sur Github. Un bouton « <em lang="en">pull
  request</em> » devrait apparaître rapidement. Cliquez dessus et la magie
  opère. Laissez-vous guider par l'interface de Github et créez votre
  <em lang="en">pull request</em>. Une <em lang="en">pull request</em> signifie :
  vous nous demandez de « tirer » (<em lang="en">pull</em>) votre travail, en
  d'autres termes d'inclure votre travail. Nous utilisons souvent l'abréviation
  PR pour <em lang="en">pull request</em>.</p>

  <h3 id="Rebase_when_asked" for="main-toc">Rebaser si nécessaire</h3>

  <p>Nous vous conseillions de commiter autant que possible. Mais parfois, c'est
  trop et ce n'est pas un problème du tout. En particulier quand vous avez
  publié votre travail, nous en avons discuté ensemble et des nouveaux commits
  ont été appliqués et publiés, l'<strong>historique</strong> résultant peut
  être un petit peu confus. Nous aimons avoir un historique propre. C'est
  pourquoi nous pouvons vous demander de rebaser votre travail : cela signifie
  réécrire votre historique. La plupart du temps, l'opération consiste à
  « squasher » des commits : vous avez 2 commits, vous squashez, vous obtenez
  1 commit. La façon la plus simple et la plus sûre de le faire est d'utiliser
  le mode interactif en exécutant :</p>
  <pre><code class="language-shell">$ git rebase --interactive incoming</code></pre>
  <p>Faites attention en le faisant. C'est malheureusement
  <strong>dangereux</strong> pour vos commits. Quand tout est propre, et parce
  que c'est la dernière requête que nous pouvons vous demander, vous re-publiez
  votre historique. Mais parce qu'il diffère de l'historique du
  <em lang="en">remote</em>, vous avez besoin de le forcer en exécutant :</p>
  <pre><code class="language-shell">$ git push me awesome-feature --force</code></pre>
  <p>De notre côté, nous sommes prêts à intégrer votre contribution !</p>
  <p>Note : si vous n'êtes pas familier avec <code>git rebase</code>, demandez
  de l'aide !</p>

  <h3 id="Reviewers" for="main-toc">Relecteurs</h3>

  <p>Comment vos contributions vont être <strong>relues</strong> ? Quand la <em
  lang="en">pull request</em> est créée, quelqu'un y sera
  <strong>assigné</strong> rapidement. La plupart du temps, ce sera un hoacker.
  Cette personne est en charge de :</p>
  <ul>
    <li>vous guider ;</li>
    <li>vous aider ;</li>
    <li>vous fournir des pointeurs et des liens vers des ressources utiles ;</li>
    <li>etc.</li>
  </ul>
  <p>À n'importe quel moment, si vous êtes perdu, pingez le relecteur en
  écrivant son pseudo préfixé de <code>@</code>. Une notification lui sera
  envoyée. Merci de garder à l'esprit que toute personne engagée dans Hoa est un
  <strong>volontaire</strong> et partage son temps libre. Si un relecteur semble
  être loin de son clavier, pingez
  <a href="https://github.com/orgs/hoaproject/teams/hoackers"><code>@hoaproject/hoackers</code></a>
  pour notifier tous les hoackers d'un coup. Si vous vous sentez abusé,
  pingez-les aussi.</p>
  <p>Si suffisamment de personnes sont disponibles, nous aimons faire une
  <strong>double relecture</strong> :</p>
  <ol>
    <li>le premier relecteur a des connaissances locales et
    <strong>profondes</strong>. Par local, nous entendons du dépôt (la
    bibliothèque la plupart du temps) ;</li>
    <li>le second relecteur vient plus tard et a des connaissances plus
    <strong>larges</strong>. Il a une meilleure vue de comment le code doit
    être intégré.</li>
  </ol>
  <p>Nous espérons pouvoir vous fournir deux relecteurs mais ce n'est pas
  toujours le cas.</p>
  <p>Note : être un relecteur est aussi une forme de contribution !</p>

  <h3 id="Commiters" for="main-toc"><em lang="en">Commiters</em></h3>

  <p>Quand vos patches ont été relus, c'est le moment pour le
  <em lang="en">commiter</em> d'entrer en scène ! Le
  <em lang="en">commiter</em> va charger votre <em lang="en">pull request</em>
  localement sur sa machine. Ensuite, vos patches seront
  <strong>appliqués</strong> et <strong>poussés</strong> sur la branche
  <code>master</code> du <em lang="en">remote</em>
  <a href="https://git.hoa-project.net"><code>git.hoa-project.net</code></a>.
  Finalement, les miroirs seront synchronisés, accompagnés des
  <em lang="en">issues</em> et <em lang="en">pull requests</em> de Github.
  Jusqu'à maintenant, nous comptons peu de <em lang="en">commiters</em> pour
  des raisons de sécurité.</p>
  <p>Grosse nouvelle : <strong>vous êtes un contributeur</strong> !</p>

  <h2 id="Contributor_pack" for="main-toc">Le pack du contributeur</h2>

  <p>Nous <strong>aimons</strong> notre communauté et nous essayons de faire la
  <strong>promotion de votre travail</strong> ! Par conséquent, nous maintenons
  une liste exhaustive de tous les contributeurs sur
  <a href="@community#Contributors">la page de la communauté</a>.</p>
  <p>En plus de cette liste, nous vous offrons les « cadeaux » suivants :</p>
  <ul>
    <li>une adresse email :
    <code><em>firstname</em>.<em>lastname</em>@hoa-project.net</code> avec son
    alias <code><em>pseudo</em>@hoa-project.net</code> ;</li>
    <li>une licence <a href="http://jetbrains.com/phpstorm/">PHPStorm</a> ;</li>
    <li>un <em lang="en">cloak</em> IRC (permet de réserver son identifiant sur
    nos salons) ;</li>
    <li>quelques <em lang="en">goodies</em> durant les événements ;</li>
    <li>des invitations et des offres spéciales à certains événements (si
    plusieurs contributeurs vont à un événement, nous pouvons demander des
    offres spéciales).</li>
  </ul>

  <h2 id="Conclusion" for="main-toc">Conclusion</h2>

  <p>Nous avons vu le <strong>processus</strong> classique que vous pouvez
  adopter en tant que contributeur (nouveau ou pas) : <strong>quoi</strong>
  faire, <strong>comment</strong> le faire, avec <strong>qui</strong> etc. Nous
  avons expliqué où obtenir de l'aide, les personnes avec qui vous serez
  susceptible de parler et comment contribuer de la meilleure façon. Certains
  outils ont été introduits pour vous aider, comme vérifier et corriger les
  <em lang="en">coding styles</em>, tester etc. Enfin, nous avons introduit
  le pack du contributeur : une récompense pour vos contributions !</p>
  <p>Nous espérons vraiment que vous vous sentez en confiance pour démarrer
  votre première contribution !</p>

  <comments />
</yield>
</overlay>
